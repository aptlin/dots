#!/usr/bin/zsh

setopt ERR_EXIT EXTENDED_GLOB

# curl -LO http://links.ethanschoonover.com/archinit

typeset -A BOOT CONFIG DEVICE INIT INSTALL MKINITCPIO OPTIONS
typeset -a PACKAGES ADDITIONAL_PACKAGES SERVICES

TRAPZERR () { print "\nUNHANDLED ERROR"; exit }

# ---------------------------------------------------------------------------
# main config and system options
# ---------------------------------------------------------------------------

CONFIG=(
username    aleph
shell       zsh
hostname    zeta
timezone    UTC
locale      "en_US.UTF-8 UTF-8"
keymap      dvorak
font        Lat2-Terminus16
)
# acceptable fonts
# ter-u24n
# Lat2-Terminus16

OPTIONS=(
filesystem  btrfs
fsoptions   default
encryption  true
)
# NOTE: bootloader should probably be determined by EFI or no EFI

# packages to be installed via pacstrap
PACKAGES=(
base
base-devel
btrfs-progs
git
lvm2
openssh
sudo
terminus-font
vim
zsh
)

SERVICES=(
)

# INTEL
PACKAGES+=(
intel
)

# X + GNOME
PACKAGES+=(
xorg-server
xorg-server-utils
xorg-apps
)

SERVICES+=(

)

# CUPS
PACKAGES+=(
cups
ghostscript
gsfonts
cups-pdf
hplip
foomatic-db
foomatic-db-engine
footmatic-db-nonfree
system-config-printer
)
# NOTE gutenprint causes problems!
# NOTE foomatic* may not be necessary

SERVICES+=(
org.cups.cupsd
cups-browsed
avahi-daemon
)

REPOS="

# xyne repos are primarily for powerpill

[xyne-any]
# A repo for Xyne's own projects: http://xyne.archlinux.ca/projects/
# Packages for "any" architecture.
# Use this repo only if there is no matching [xyne-*] repo for your architecture.
SigLevel = Required
Server = http://xyne.archlinux.ca/repos/xyne

[xyne-i686]
# A repo for Xyne's own projects: http://xyne.archlinux.ca/projects/
# Packages for the "i686" architecture.
# Note that this includes all packages in [xyne-any].
SigLevel = Required
Server = http://xyne.archlinux.ca/repos/xyne

[xyne-x86_64]
# A repo for Xyne's own projects: http://xyne.archlinux.ca/projects/
# Packages for the "x86_64" architecture.
# Note that this includes all packages in [xyne-any].
SigLevel = Required
Server = http://xyne.archlinux.ca/repos/xyne

[infinality-bundle]
Server = http://bohoomil.com/repo/$arch

[infinality-bundle-fonts]
Server = http://bohoomil.com/repo/fonts

"

ADDITIONAL_PACKAGES=(
colordiff
)

# services that will be enabled via "systemctl enable ..."
SERVICES=(
org.cups.cupsd
cups-browsed
avahi-daemon
)
# NOTE: avahi-daemon started/enabled independently may not be necessary for
#       just cups-browsed support

# aur packages to either install or queue up for reboot install
AUR=(
aura-bin
powerpill
customizepkg-git
aur-git
)


# ---------------------------------------------------------------------------
# system values (set manually if desired)
# ---------------------------------------------------------------------------

RAM="${$(< /proc/meminfo)[2]}"
SWAPSIZE="$(( $RAM / 1024 + 1 ))M"
DRIVE=/dev/sda
MOUNT=/mnt
[[ -d /sys/firmware/efi/efivars ]] && efi=true || efi=false


# ---------------------------------------------------------------------------
# preflight
# ---------------------------------------------------------------------------

# purely cosmetic during installation
setfont $CONFIG[font]

mount -t btrfs LABEL=system $MOUNT

# ---------------------------------------------------------------------------
# install packages
# ---------------------------------------------------------------------------
pacstrap $MOUNT $PACKAGES

# ---------------------------------------------------------------------------
# fstab
# ---------------------------------------------------------------------------
# Generate fstab (with no encryption, this can be skipped). See also:
# http://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/

if [[ ${(L)OPTIONS[encryption]} =~ (true|yes|1) ]]; then
    #genfstab -L -p $MOUNT >> $MOUNT/etc/fstab
    genfstab -U -p $MOUNT >> $MOUNT/etc/fstab
fi


# ---------------------------------------------------------------------------
# system config
# ---------------------------------------------------------------------------
chrooted () { arch-chroot $MOUNT zsh -c "$*"; }

chrooted hwclock --systohc --utc

systemd-firstboot --root=$MOUNT \
	--locale=${${=CONFIG[locale]}[1]} \
	--locale-messages=${${=CONFIG[locale]}[1]} \
	--timezone=$CONFIG[timezone] \
	--hostname=$CONFIG[hostname]

print "en_US.UTF-8 UTF-8" >> $MOUNT/etc/locale.gen
chrooted locale-gen

cat > $MOUNT/etc/vconsole.conf << EOF
FONT=$CONFIG[font]
EOF


# ---------------------------------------------------
# bootloader
# ---------------------------------------------------
if [[ ${(L)efi} =~ (true|yes|1) ]]; then
    chrooted bootctl install
    # # create /boot/loader/loader.conf
cat > $MOUNT/boot/loader/loader.conf << EOF
timeout 3
default arch*
EOF
cat > $MOUNT/boot/loader/entries/arch.conf << EOF
title       Arch Linux
linux       /vmlinuz-linux
initrd      /initramfs-linux.img
options     rw rd.luks.allow-discards rd.lvm.lv=storage/system rd.luks.uuid=$(lsblk ${DRIVE}2 -dno UUID) rd.lvm.lv=storage/swap root=LABEL=system rootflags=subvol=/root,subvol=root,rw,x-systemd.device-timeout=0
EOF
#options     root=LABEL=System rw resume=LABEL=Swap quiet
else
    #pacstrap $MOUNT grub
    #chrooted "grub-install $DRIVE; grub-mkconfig -o /boot/grub/grub.cfg"
    pacstrap $MOUNT syslinux gptfdisk mtools
    syslinux-install_update -i -a -m -c $MOUNT
    mv $MOUNT/boot/syslinux/syslinux.cfg $MOUNT/boot/syslinux/syslinux.cfg.orig
cat > $MOUNT/boot/syslinux/syslinux.cfg << EOF
# Config file for Syslinux -
# /boot/syslinux/syslinux.cfg
#
# see original file at /boot/syslinux/syslinux.cfg.orig
#
# Please review the wiki: https://wiki.archlinux.org/index.php/Syslinux
# The wiki provides further configuration examples

DEFAULT arch
PROMPT 0        # Set to 1 if you always want to display the boot: prompt
TIMEOUT 50

# Menu Configuration
# Either menu.c32 or vesamenu32.c32 must be copied to /boot/syslinux
UI menu.c32
#UI vesamenu.c32

# Refer to http://syslinux.zytor.com/wiki/index.php/Doc/menu
MENU TITLE Arch Linux
#MENU BACKGROUND splash.png
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std
MENU COLOR help         37;40   #c0ffffff #a0000000 std
MENU COLOR timeout_msg  37;40   #80ffffff #00000000 std
MENU COLOR timeout      1;37;40 #c0ffffff #00000000 std
MENU COLOR msg07        37;40   #90ffffff #a0000000 std
MENU COLOR tabmsg       31;40   #30ffffff #00000000 std

#APPEND root=/dev/sda3 rw
#APPEND rw rd.luks.crypttab=0 rd.luks.allow-discards rd.lvm.lv=storage/system rd.luks.uuid=$(lsblk ${DRIVE}2 -dno UUID) rd.lvm.lv=storage/swap root=PARTLABEL=system rootflags=subvol=/root,subvol=root,rw,x-systemd.device-timeout=0

LABEL arch
    MENU LABEL Arch Linux
    LINUX ../vmlinuz-linux
    APPEND rw rd.luks.crypttab=0 rd.luks.allow-discards rd.lvm.lv=storage/system rd.luks.uuid=$(lsblk ${DRIVE}2 -dno UUID) rd.lvm.lv=storage/swap root=PARTLABEL=system rootflags=subvol=/root,subvol=root,rw
    INITRD ../initramfs-linux.img

LABEL archfallback
    MENU LABEL Arch Linux Fallback
    LINUX ../vmlinuz-linux
    APPEND rw rd.luks.crypttab=0 rd.luks.allow-discards root=PARTLABEL=system rootflags=subvol=root,rw,x-systemd.device-timeout=0
    INITRD ../initramfs-linux-fallback.img

LABEL hdt
        MENU LABEL HDT (Hardware Detection Tool)
        COM32 hdt.c32

LABEL reboot
        MENU LABEL Reboot
        COM32 reboot.c32

LABEL poweroff
        MENU LABEL Poweroff
        COM32 poweroff.c32
EOF

fi


# ---------------------------------------------------
# enable services
# ---------------------------------------------------

for servicename in $SERVICES; do
    chrooted systemctl enable $servicename
done


# ---------------------------------------------------
# users / passwords
# ---------------------------------------------------

chrooted "useradd -m -G wheel \
	          -s /usr/bin/$CONFIG[shell] \
	          $CONFIG[username]"

#for user in root $CONFIG[username]; do
#    print "Enter password for $user"
#    while ! ${${${pass::=$(read -Ers "?Passphrase: ")}:#$(\
#        read -Ers "?$(print "\nConfirmation: ")")}:+false};
#        do print "\nDidn't match--try again:\n"; done; print
#    chrooted "print -r $user:$pass | chpasswd"
#done

for user in root $CONFIG[username]; do
    chrooted "print -r $user:$userpass | chpasswd"
done

tmpfile=$(mktemp)
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > $tmpfile
visudo -cf $tmpfile \
    && { mv $tmpfile $MOUNT/etc/sudoers.d/wheel } \
    || { print "ERROR updating sudoers; no change made" }


# ---------------------------------------------------
# aur
# ---------------------------------------------------

#chrooted "su $CONFIG[username] -c mkdir -pr /home/$CONFIG[username]/sys/aur"


# ---------------------------------------------------
# change hooks and regenerate initcpio
# ---------------------------------------------------

mv $MOUNT/etc/mkinitcpio.conf /etc/mkinitcpio.orig || :
cat > $MOUNT/etc/mkinitcpio.conf << EOF
MODULES=""
BINARIES=""
FILES=""
HOOKS="base systemd sd-vconsole autodetect modconf block sd-encrypt sd-lvm2 btrfs filesystems keyboard fsck shutdown"
EOF

chrooted "mkinitcpio -p linux"

# ---------------------------------------------------
# notes
# ---------------------------------------------------
